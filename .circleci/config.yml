version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI-OIDC-Role"
  ecr-repository-prefix:
    type: string
    default: "synthetix-prod"

jobs:
  build-and-push-multi-arch:
    docker:
      - image: cimg/base:2023.03
    parameters:
      network:
        type: string
    steps:
      - checkout
      
      # Debug step to display directory structure
      - run:
          name: Debug Directory Structure
          command: |
            echo "Current directory: $(pwd)"
            echo "Looking for network directories..."
            find . -type d -name "indexers"
            ls -la ./indexers || echo "indexers directory not found!"
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Create Dockerfile and build/push image
      - run:
          name: Build and Push Multi-Arch Image
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/synthetix-prod-<< parameters.network >>"
            TAG="${CIRCLE_SHA1}"
            
            # Check different possible locations for the network directory
            if [ -d "./indexers/<< parameters.network >>" ]; then
              NETWORK_DIR="./indexers/<< parameters.network >>"
            else
              echo "Error: Could not find directory for << parameters.network >>"
              echo "Directory structure:"
              find . -name "*<< parameters.network >>*" -type d
              exit 1
            fi
            
            echo "Using network directory: $NETWORK_DIR"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "synthetix-prod-<< parameters.network >>" || \
              aws ecr create-repository --repository-name "synthetix-prod-<< parameters.network >>"
            
            # Copy the multi-arch Dockerfile to the network directory
            cp ./indexers/Dockerfile.multiarch $NETWORK_DIR/Dockerfile.multiarch
            
            # Build and push for both architectures
            cd $NETWORK_DIR
            cat Dockerfile.multiarch
            
            docker buildx build \
              --file Dockerfile.multiarch \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

  build-transformers-mage-multi-arch:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Create optimized ARM64 Dockerfile for Mage
      - run:
          name: Create Optimized Dockerfile
          command: |
            cat > ./transformers-mage/Dockerfile.optimized << 'EOL'
            # First stage: Base builder with platform args
            FROM --platform=${BUILDPLATFORM:-linux/amd64} python:3.9-slim AS builder

            # Accept architecture arguments
            ARG TARGETPLATFORM
            ARG BUILDPLATFORM
            RUN echo "Building on $BUILDPLATFORM for $TARGETPLATFORM"

            # Install build dependencies
            RUN apt-get update && apt-get install -y \
                build-essential \
                git \
                curl \
                pkg-config \
                libssl-dev \
                # Architecture-specific optimizations
                libopenblas-dev \
                liblapack-dev \
                && rm -rf /var/lib/apt/lists/*

            # Set up virtual environment
            ENV VIRTUAL_ENV=/opt/venv
            RUN python -m venv $VIRTUAL_ENV
            ENV PATH="$VIRTUAL_ENV/bin:$PATH"

            # Install base dependencies with versions that work across architectures
            RUN pip install --upgrade pip wheel setuptools
            RUN pip install \
                requests==2.31.0 \
                pyyaml==6.0.1 \
                numpy==1.24.4 \
                pandas==2.0.3 \
                pympler==1.0.1

            # Install blockchain-related dependencies
            RUN pip install \
                web3==6.11.1 \
                eth-abi==4.2.1 \
                synthetix==0.1.19 \
                clickhouse-driver==0.2.6 \
                boto3==1.28.38

            # Copy and filter requirements
            COPY requirements.txt /tmp/requirements.txt
            RUN grep -v -E "duckdb|polars|web3|eth-abi|synthetix|requests|pyyaml|pandas|numpy|torch|tensorflow|clickhouse-driver|boto3" /tmp/requirements.txt > /tmp/remaining_requirements.txt || true
            RUN if [ -s /tmp/remaining_requirements.txt ]; then \
                    pip install -r /tmp/remaining_requirements.txt; \
                fi

            # Install mage-ai separately to ensure it's properly installed
            RUN pip install mage-ai==0.9.45

            # Second stage: Final image
            FROM --platform=${TARGETPLATFORM:-linux/amd64} python:3.9-slim

            # Add metadata
            LABEL maintainer="Synthetix Team"
            LABEL description="Synthetix Transformers Mage (Multi-Arch)"

            # Copy virtual environment
            COPY --from=builder /opt/venv /opt/venv
            ENV PATH="/opt/venv/bin:$PATH"

            # Install runtime dependencies
            RUN apt-get update && apt-get install -y \
                libssl3 \
                ca-certificates \
                libopenblas0 \
                procps \
                htop \
                net-tools \
                curl \
                && rm -rf /var/lib/apt/lists/*

            # Install architecture-specific versions of DuckDB & Polars
            # This will compile natively for the target platform
            RUN pip install duckdb==0.8.1 polars==0.19.3 --no-cache-dir

            # Verify installation
            RUN python -c "import duckdb; print('DuckDB version:', duckdb.__version__); print('Running on ' + '${TARGETPLATFORM}')"

            # Create a non-root user
            RUN adduser --disabled-password --gecos '' appuser

            # Set up directories
            WORKDIR /home/src
            RUN mkdir -p /home/src/mage_data/Synthetix/logs && \
                mkdir -p /home/src/mage_data/Synthetix/pipelines && \
                chown -R appuser:appuser /home/src

            # Copy application code
            COPY --chown=appuser:appuser . .

            # Make start script executable
            COPY start.sh /home/src/
            RUN chmod +x /home/src/start.sh

            # Set environment variables for optimization and application
            ENV PYTHONDONTWRITEBYTECODE=1 \
                PYTHONUNBUFFERED=1 \
                PYTHONPATH=/home/src \
                PYTHONMALLOC=malloc \
                MPLBACKEND=Agg \
                NUMBA_DISABLE_JIT=1 \
                OMP_NUM_THREADS=2 \
                OPENBLAS_NUM_THREADS=2 \
                PYTHONIOENCODING=UTF-8 \
                MAGE_DATA_DIR=/home/src/mage_data \
                AWS_SDK_LOAD_CONFIG=1

            # Configure healthcheck
            HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
              CMD curl -f http://localhost:6789/ || exit 1

            # Expose the port
            EXPOSE 6789

            # Switch to non-root user
            USER appuser

            # Command with explicit host binding
            CMD ["mage", "start", "--host", "0.0.0.0", "--port", "6789"]
            EOL
      
      # Build and push multi-architecture Docker image
      - run:
          name: Build and Push Multi-Arch Image
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mage-synthetix-prod-image"
            TAG="${CIRCLE_SHA1}"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "mage-synthetix-prod-image" || \
              aws ecr create-repository --repository-name "mage-synthetix-prod-image"
            
            # Build and push for both architectures
            cd ./transformers-mage
            docker buildx build \
              --file Dockerfile.optimized \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .
            
            echo "Successfully built and pushed ${REPO}:${TAG}"

  # New metabase job with simplified Dockerfile creation
  build-metabase-multi-arch:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name metabase-builder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image for Metabase
      - run:
          name: Build and Push Multi-Arch Image for Metabase
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/synthetix-prod-metabase"
            TAG="${CIRCLE_SHA1}"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "synthetix-prod-metabase" || \
              aws ecr create-repository --repository-name "synthetix-prod-metabase"
            
            cd metabase
            
            # Adding platform args for multi-arch
            sed -i 's/FROM eclipse-temurin:11-jre-focal AS builder/FROM --platform=${BUILDPLATFORM:-linux\/amd64} eclipse-temurin:11-jre-focal AS builder/' Dockerfile
            sed -i 's/FROM eclipse-temurin:11-jre-focal/FROM --platform=${TARGETPLATFORM:-linux\/amd64} eclipse-temurin:11-jre-focal/' Dockerfile
            
            # Build and push
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-transformers-mage-multi-arch:
          context: aws-credentials
          filters:
            branches:
              only: 
                - main
                - feat/eks
      - build-and-push-multi-arch:
          context: aws-credentials
          matrix:
            parameters:
              network: [
                "arbitrum-mainnet", 
                "arbitrum-sepolia", 
                "base-mainnet", 
                "base-mainnet-lt",
                "base-sepolia", 
                "eth-mainnet", 
                "optimism-mainnet", 
                "optimism-mainnet-tlx",
                "snax-mainnet", 
                "snax-testnet"
              ]
          filters:
            branches:
              only: 
                - main
                - feat/eks
      
      # Add Metabase build job
      - build-metabase-multi-arch:
          context: aws-credentials
          filters:
            branches:
              only: 
                - main
                - feat/eks
