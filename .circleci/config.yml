version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI-OIDC-Role"
  ecr-repository-prefix:
    type: string
    default: "mage-synthetix-prod"

jobs:
  build-and-push-multi-arch:
    docker:
      - image: cimg/base:2023.03
    parameters:
      network:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.14
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image
      - run:
          name: Build and Push Multi-Arch Image
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mage-synthetix-prod-<< parameters.network >>"
            TAG="${CIRCLE_SHA1}"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "mage-synthetix-prod-<< parameters.network >>" || \
              aws ecr create-repository --repository-name "mage-synthetix-prod-<< parameters.network >>"
            
            # Build and push for both architectures
            cd ./indexers/<< parameters.network >>
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

  build-transformers-mage-multi-arch:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.14
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image for transformers-mage
      - run:
          name: Build and Push Multi-Arch Image for transformers-mage
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mage-synthetix-prod-image"
            TAG="${CIRCLE_SHA1}"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "mage-synthetix-prod-image" || \
              aws ecr create-repository --repository-name "mage-synthetix-prod-image"
            
            # Build and push for both architectures
            cd ./transformers-mage
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-transformers-mage-multi-arch:
          context: aws-credentials
          filters:
            branches:
              only: 
                - main
                - feat/eks
      - build-and-push-multi-arch:
          context: aws-credentials
          matrix:
            parameters:
              network: [
                "arbitrum-mainnet", 
                "arbitrum-sepolia", 
                "base-mainnet", 
                "base-mainnet-lt",
                "base-sepolia", 
                "eth-mainnet", 
                "optimism-mainnet", 
                "optimism-mainnet-tlx",
                "snax-mainnet", 
                "snax-testnet"
              ]
          filters:
            branches:
              only: 
                - main
                - feat/eks
                