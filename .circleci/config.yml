version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI-OIDC-Role"
  ecr-repository-prefix:
    type: string
    default: "synthetix-prod"

jobs:
  build-and-push-multi-arch:
    docker:
      - image: cimg/base:2023.03
    parameters:
      network:
        type: string
    steps:
      - checkout
      
      # Debug step to display directory structure
      - run:
          name: Debug Directory Structure
          command: |
            echo "Current directory: $(pwd)"
            echo "Looking for network directories..."
            find . -type d -name "indexers"
            ls -la ./indexers || echo "indexers directory not found!"
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Create Dockerfile and build/push image
      - run:
          name: Create Dockerfile and Build/Push Multi-Arch Image
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/synthetix-prod-<< parameters.network >>"
            TAG="${CIRCLE_SHA1}"
            
            # Check different possible locations for the network directory
            if [ -d "./indexers/<< parameters.network >>" ]; then
              NETWORK_DIR="./indexers/<< parameters.network >>"
            else
              echo "Error: Could not find directory for << parameters.network >>"
              echo "Directory structure:"
              find . -name "*<< parameters.network >>*" -type d
              exit 1
            fi
            
            echo "Using network directory: $NETWORK_DIR"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "synthetix-prod-<< parameters.network >>" || \
              aws ecr create-repository --repository-name "synthetix-prod-<< parameters.network >>"
            
            # Create a Dockerfile - using echo commands to avoid YAML parsing issues
            echo 'FROM --platform=${BUILDPLATFORM:-linux/amd64} node:16-alpine AS builder' > $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'ARG TARGETPLATFORM' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'ARG BUILDPLATFORM' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'RUN echo "Building on ${BUILDPLATFORM:-linux/amd64} for ${TARGETPLATFORM:-linux/amd64}"' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'WORKDIR /app' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy package files first to leverage Docker layer caching' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY package*.json ./' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Install dependencies with proper native modules for target architecture' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'RUN apk add --no-cache python3 build-base && \' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '    npm ci && \' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '    apk del build-base' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy the rest of the application' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY . .' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Generate processor and build' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'RUN npm run generate:processor' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'RUN npm run build' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Create a smaller production image' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'FROM --platform=${TARGETPLATFORM:-linux/amd64} node:16-alpine' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'WORKDIR /app' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy package.json files' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/package*.json ./' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy node_modules' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/node_modules ./node_modules' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy ABI files which are needed at runtime' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/abi ./abi' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Copy config files' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/squid.yaml ./squid.yaml' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/commands.json ./commands.json' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/tsconfig.json ./tsconfig.json' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Check and copy build output (typically lib in Squid projects)' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'COPY --from=builder /app/lib ./lib' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Set environment variables for the application' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'ENV NODE_ENV=production' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '' >> $NETWORK_DIR/Dockerfile.multiarch
            echo '# Run the application' >> $NETWORK_DIR/Dockerfile.multiarch
            echo 'CMD ["npm", "run", "start"]' >> $NETWORK_DIR/Dockerfile.multiarch
            
            # Build and push for both architectures
            cd $NETWORK_DIR
            cat Dockerfile.multiarch
            
            docker buildx build \
              --file Dockerfile.multiarch \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

  build-transformers-mage-multi-arch:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      
      # Debug step to display directory structure
      - run:
          name: Debug Directory Structure
          command: |
            echo "Current directory: $(pwd)"
            echo "Looking for transformers-mage directory..."
            find . -type d -name "transformers-mage"
            ls -la ./transformers-mage || echo "transformers-mage directory not found!"
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image for transformers-mage
      - run:
          name: Build and Push Multi-Arch Image for transformers-mage
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mage-synthetix-prod-image"
            TAG="${CIRCLE_SHA1}"
            
            # Ensure the directory exists
            if [ ! -d "./transformers-mage" ]; then
              echo "Error: transformers-mage directory not found"
              exit 1
            fi
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "mage-synthetix-prod-image" || \
              aws ecr create-repository --repository-name "mage-synthetix-prod-image"
            
            # Build and push for both architectures
            cd ./transformers-mage
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-transformers-mage-multi-arch:
          context: aws-credentials
          filters:
            branches:
              only: 
                - main
                - feat/eks
      - build-and-push-multi-arch:
          context: aws-credentials
          matrix:
            parameters:
              network: [
                "arbitrum-mainnet", 
                "arbitrum-sepolia", 
                "base-mainnet", 
                "base-mainnet-lt",
                "base-sepolia", 
                "eth-mainnet", 
                "optimism-mainnet", 
                "optimism-mainnet-tlx",
                "snax-mainnet", 
                "snax-testnet"
              ]
          filters:
            branches:
              only: 
                - main
                - feat/eks
                