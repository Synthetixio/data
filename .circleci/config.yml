version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI-OIDC-Role"
  ecr-repository-prefix:
    type: string
    default: "synthetix-prod"

jobs:
  build-and-push-multi-arch:
    docker:
      - image: cimg/base:2023.03
    parameters:
      network:
        type: string
    steps:
      - checkout
      
      # Debug step to display directory structure
      - run:
          name: Debug Directory Structure
          command: |
            echo "Current directory: $(pwd)"
            echo "Directory listing:"
            ls -la
            echo "Looking for << parameters.network >> directory..."
            find . -type d -name "<< parameters.network >>" || echo "Network directory not found!"
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image
      - run:
          name: Build and Push Multi-Arch Image
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/synthetix-prod-<< parameters.network >>"
            TAG="${CIRCLE_SHA1}"
            
            # Check different possible locations for the network directory
            if [ -d "./<< parameters.network >>" ]; then
              NETWORK_DIR="./<< parameters.network >>"
            elif [ -d "./indexers/<< parameters.network >>" ]; then
              NETWORK_DIR="./indexers/<< parameters.network >>"
            else
              echo "Error: Could not find directory for << parameters.network >>"
              echo "Current directory structure:"
              ls -la
              echo "Searching for potential matches:"
              find . -name "*<< parameters.network >>*" -type d
              exit 1
            fi
            
            echo "Using network directory: $NETWORK_DIR"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "synthetix-prod-<< parameters.network >>" || \
              aws ecr create-repository --repository-name "synthetix-prod-<< parameters.network >>"
            
            # Create a Dockerfile that works with Squid indexers
            cat > $NETWORK_DIR/Dockerfile << EOL
FROM --platform=\${BUILDPLATFORM:-linux/amd64} node:16-alpine AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "Building on \${BUILDPLATFORM:-linux/amd64} for \${TARGETPLATFORM:-linux/amd64}"

WORKDIR /app

# Copy package files first to leverage Docker layer caching
COPY package*.json ./

# Install dependencies with proper native modules for target architecture
RUN apk add --no-cache python3 build-base && \\
    npm ci && \\
    apk del build-base

# Copy the rest of the application
COPY . .

# Generate processor and build
RUN npm run generate:processor
RUN npm run build

# Create a smaller production image
FROM --platform=\${TARGETPLATFORM:-linux/amd64} node:16-alpine

WORKDIR /app

# Copy package.json files
COPY --from=builder /app/package*.json ./

# Copy node_modules
COPY --from=builder /app/node_modules ./node_modules

# Copy ABI files which are needed at runtime
COPY --from=builder /app/abi ./abi

# Copy config files
COPY --from=builder /app/squid.yaml ./squid.yaml
COPY --from=builder /app/commands.json ./commands.json
COPY --from=builder /app/tsconfig.json ./tsconfig.json

# Copy build output (typically lib in Squid projects)
COPY --from=builder /app/lib ./lib 2>/dev/null || true

# Set environment variables for the application
ENV NODE_ENV=production

# Run the application
CMD ["npm", "run", "start"]
EOL
            
            # Build and push for both architectures
            cd $NETWORK_DIR
            ls -la
            cat Dockerfile
            
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

  build-transformers-mage-multi-arch:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      
      # Debug step to display directory structure
      - run:
          name: Debug Directory Structure
          command: |
            echo "Current directory: $(pwd)"
            echo "Directory listing:"
            ls -la
            echo "Looking for transformers-mage directory..."
            find . -type d -name "transformers-mage" || echo "transformers-mage directory not found!"
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      
      # Install Docker Buildx for multi-architecture support
      - run:
          name: Install Docker Buildx
          command: |
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
      
      # Log in to ECR
      - run:
          name: Login to Amazon ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      
      # Build and push multi-architecture Docker image for transformers-mage
      - run:
          name: Build and Push Multi-Arch Image for transformers-mage
          command: |
            REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mage-synthetix-prod-image"
            TAG="${CIRCLE_SHA1}"
            
            # Check different possible locations for the transformers-mage directory
            if [ -d "./transformers-mage" ]; then
              MAGE_DIR="./transformers-mage"
            elif [ -d "../transformers-mage" ]; then
              MAGE_DIR="../transformers-mage"
            else
              echo "Error: Could not find directory for transformers-mage"
              echo "Current directory structure:"
              ls -la
              echo "Searching for potential matches:"
              find . -name "*transformers-mage*" -type d
              exit 1
            fi
            
            echo "Using transformers-mage directory: $MAGE_DIR"
            
            # Ensure repository exists
            aws ecr describe-repositories --repository-names "mage-synthetix-prod-image" || \
              aws ecr create-repository --repository-name "mage-synthetix-prod-image"
            
            # Build and push for both architectures
            cd $MAGE_DIR
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag ${REPO}:${TAG} \
              --tag ${REPO}:latest \
              --push \
              .

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-transformers-mage-multi-arch:
          context: aws-credentials
          filters:
            branches:
              only: 
                - main
                - feat/eks
      - build-and-push-multi-arch:
          context: aws-credentials
          matrix:
            parameters:
              network: [
                "arbitrum-mainnet", 
                "arbitrum-sepolia", 
                "base-mainnet", 
                "base-mainnet-lt",
                "base-sepolia", 
                "eth-mainnet", 
                "optimism-mainnet", 
                "optimism-mainnet-tlx",
                "snax-mainnet", 
                "snax-testnet"
              ]
          filters:
            branches:
              only: 
                - main
                - feat/eks
                