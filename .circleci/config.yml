version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

parameters:
  aws-region:
    type: string
    default: "us-east-1"
  aws-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI-OIDC-Role"
  ecr-repository-prefix:
    type: string
    default: "synthetix-data/indexer"
  eks-cluster-name:
    type: string
    default: "snx"

jobs:
  build-and-push-images:
    docker:
      - image: cimg/base:2023.03
    parameters:
      network:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      
      - aws-cli/setup:
          role-arn: AWS_ROLE_ARN
          aws-region: AWS_DEFAULT_REGION
      
      # Build and push Docker image for specific network
      - aws-ecr/build-and-push-image:
          region: ${AWS_DEFAULT_REGION}
          repo: synthetix-data/indexer
          tag: "${CIRCLE_SHA1}-<< parameters.network >>,latest-<< parameters.network >>"
          path: ./indexers/<< parameters.network >>
          dockerfile: ./indexers/<< parameters.network >>/Dockerfile
          registry-id: AWS_ACCOUNT_ID
  
  deploy-to-eks:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: AWS_ROLE_ARN
          aws-region: AWS_DEFAULT_REGION
      
      - kubernetes/install-kubectl
      
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: snx
          aws-region: ${AWS_DEFAULT_REGION}
      
      # Get Aurora DB endpoint from CloudFormation outputs
      - run:
          name: Get Aurora DB details
          command: |
            # Get DB endpoint from CloudFormation output
            DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name synthetix-aurora-stack --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" --output text)
            echo "DB_ENDPOINT=$DB_ENDPOINT" >> $BASH_ENV
            
            # Get DB secret ARN
            DB_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name synthetix-aurora-stack --query "Stacks[0].Outputs[?OutputKey=='DBSecretArn'].OutputValue" --output text)
            echo "DB_SECRET_ARN=$DB_SECRET_ARN" >> $BASH_ENV
      
      # Update ConfigMap with Aurora DB endpoint
      - run:
          name: Update ConfigMap with Aurora DB endpoint
          command: |
            # Create namespace if it doesn't exist
            if ! kubectl get namespace synthetix-data > /dev/null 2>&1; then
              kubectl create namespace synthetix-data
            fi
            
            # Create or update ConfigMap
            cat > db-config.yaml \<<EOF
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: db-config
              namespace: synthetix-data
            data:
              db-host: "${DB_ENDPOINT}"
              db-port: "5432"
              # Include all RPC endpoints as in the template
              arbitrum-mainnet-rpc: "https://arb1.arbitrum.io/rpc"
              arbitrum-sepolia-rpc: "https://sepolia-rollup.arbitrum.io/rpc"
              base-mainnet-rpc: "https://mainnet.base.org"
              base-mainnet-lt-rpc: "https://mainnet.base.org"
              base-sepolia-rpc: "https://sepolia.base.org"
              eth-mainnet-rpc: "https://eth-mainnet.g.alchemy.com/v2/\${ALCHEMY_API_KEY}"
              optimism-mainnet-rpc: "https://mainnet.optimism.io"
              optimism-mainnet-tlx-rpc: "https://mainnet.optimism.io"
              snax-mainnet-rpc: "https://mainnet.snaxchain.io/"
              snax-testnet-rpc: "https://testnet.snaxchain.io/"
            EOF
            
            kubectl apply -f db-config.yaml
      
      # Configure External Secrets
      - run:
          name: Set up External Secrets for Aurora DB credentials
          command: |
            # Replace placeholder account ID in YAML files
            ACCOUNT_ID=$(echo $AWS_ECR_ACCOUNT_URL | cut -d'.' -f1)
            sed -i "s/ACCOUNT_ID/$ACCOUNT_ID/g" k8s/external-secrets.yaml
            
            kubectl apply -f k8s/external-secrets.yaml
            
            # Create ExternalSecret to fetch Aurora DB credentials
            cat > external-secret.yaml \<<EOF
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              name: aurora-db-credentials
              namespace: synthetix-data
            spec:
              refreshInterval: "15m"
              secretStoreRef:
                name: aws-secretsmanager
                kind: ClusterSecretStore
              target:
                name: aurora-db-credentials
                creationPolicy: Owner
              data:
              - secretKey: password
                remoteRef:
                  key: "$(basename $DB_SECRET_ARN)"
                  property: password
              - secretKey: username
                remoteRef:
                  key: "$(basename $DB_SECRET_ARN)"
                  property: username
              - secretKey: conduit-api-key
                remoteRef:
                  key: "synthetix-conduit-api-key"
                  property: key
            EOF
            
            kubectl apply -f external-secret.yaml
      
      # Apply all deployments
      - run:
          name: Deploy all indexers
          command: |
            # Replace IMAGE_TAG in all deployment files
            for deployment in k8s/deployments/*.yaml; do
              network=$(basename $deployment .yaml)
              image_tag="${AWS_ECR_ACCOUNT_URL}/${pipeline.parameters.ecr-repository-prefix}:${CIRCLE_SHA1}-${network}"
              
              # Replace image tag in deployment file
              sed -i "s|\${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_REGION}.amazonaws.com/synthetix-data/indexer:latest-${network}|$image_tag|g" $deployment
              
              # Apply deployment
              kubectl apply -f $deployment
              
              echo "Deployed $network"
            done
            
            # Wait for deployments to be ready
            for network in arbitrum-mainnet arbitrum-sepolia base-mainnet base-mainnet-lt base-sepolia eth-mainnet optimism-mainnet optimism-mainnet-tlx snax-mainnet snax-testnet; do
              kubectl rollout status deployment/indexer-$network -n synthetix-data --timeout=300s
            done

workflows:
  version: 2
  build-deploy:
    jobs:
      # Build and push images for all networks
      - build-and-push-images:
          context: aws-credentials
          matrix:
            parameters:
              network: [
                "arbitrum-mainnet", 
                "arbitrum-sepolia", 
                "base-mainnet", 
                "base-mainnet-lt",
                "base-sepolia", 
                "eth-mainnet", 
                "optimism-mainnet", 
                "optimism-mainnet-tlx",
                "snax-mainnet", 
                "snax-testnet"
              ]
          filters:
            branches:
              only: 
                - main
                - feat/eks
      
      # Deploy to EKS with Aurora integration
      - deploy-to-eks:
          context: aws-credentials
          requires:
            - build-and-push-images
          filters:
            branches:
              only: main
